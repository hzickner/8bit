; 03/22/2017	599 bytes
; 20000		11	435	455	901
; 03/22/2017	593 bytes
; 20000		11	381	455	847	partial register optimisation
; 03/22/2017	591 bytes
; 20000		11	375	454	840	jp/jr optimization
; 03/23/2017	575 bytes
; 20000		11	344	455	810	register optimization
; 03/23/2017	569 bytes
; 20000		11	288	455	754	register optimization
; 03/23/2017	557 bytes
; 20000		11	221	455	687	register optimization
; 03/23/2017	555 bytes
; 20000		11	219	456	686	register optimization
; 03/23/2017	542 bytes
; 20000		11	193	455	659	register optimization
; 03/23/2017	542 bytes
; 20000		11	192	210	413	start printing at 0,0 less scrolling
; 03/30/2017	540 bytes
; 20000		11	192	208	411	register optimization in print loop

	CPU Z80

CODEBASE	EQU 0200H

	ORG CODEBASE-80H		; 128byte file header before start of code
	
; CAOS file header
	DEFB "SIEVE",0,0,0,0,0,0	; name 11 chars!
	DEFB 5 dup (0)
	DEFB 3 				;=3 mit SS-ADR, 2 ohne
	DEFW AAMAIN
	DEFW EEMAIN
	DEFW main 			;nur bei SS
	DEFB 105 dup (0)		; fill block

; start of code
AAMAIN EQU $

; magic command header for CAOS menu
	DEFW 7F7FH
	DEFB "SIEVE"
	DEFB 01

;
; includes for EQUs and macros
	include "..\include\kc85equ.z80"
	include "..\include\crt_mac.z80"
		
NN	EQU 20000	
;
; main function	
main:
	cls
	call reset_timer
	
	ld hl,NN
	ld (u16_N),hl

	ld hl,flagbuf
	ld bc,(u16_n)
	xor a
	call memset
	
	ld hl,(timer)
	ld (u16_tm1),hl
	
	ld hl,flagbuf
	ld (hl),1		; flags[0]=1
	
	inc hl			; PTR2=flagbuf+1 ; hl for ptr2
	
	ld bc,02		; use bc for i
	ld iy,0			; count=0; use iy for count
	
while1
	ld a,(u16_n)
	sub c
	ld a,(u16_n+1)
	sbc a,b
	jr c,while1out		; while (i <= n)
	
	ld a,(hl)
	or a
	jp nz,else1		; if !flag[i] ; jp faster here
	
	inc iy			; count++
	
	ld a,c			; use bc for i
	add a,c
	ld e,a
	ld a,b
	adc a,b
	ld d,a			; k = i+i ; use de for k
	
	push hl			; save ptr2 ; use hl for ptr3 in while2 loop
while2	
	ld a,(u16_n)
	sub e
	ld a,(u16_n+1)
	sbc a,d
	jr c,while2out		; while (k <= n) ; jr is faster here
	
	add hl,bc		; ptr3=ptr3+i
	
	ld a,1
	ld (hl),a
	
	;ld hl,(u16_k)		;16
	;add hl,bc		;11
	;ld (u16_k),hl		;16 43c 10b	k=k+i
	
	;ld h,d			;4
	;ld l,e			;4
	;add hl,bc		;11
	;ld d,h			;4
	;ld e,l			;4  27	k=k+i
	
	ld a,e			;4
	add a,c			;4
	ld e,a			;4
	ld a,d			;4
	adc a,b			;4
	ld d,a			;4  24	k=k+i
	
	jp while2
while2out
	pop hl			; restore ptr2
else1	
	inc bc			; i++
	inc hl			; ptr2++
	
	jp while1
while1out	
	ld (u16_count),iy	; store count
	
	ld hl,(timer)
	ld (u16_tm2),hl

;
; print primes <N2
	ld hl,(u16_N)
	srl h
	rr l
	srl h
	rr l
	srl h
	rr l
	ld (u16_N2),hl		; N2 = N >> 3
	
	ld iy,0			; use iy for count2
	ld bc,2			; use bc for i
	ld (u16_i),bc		; i=2
	ld hl,flagbuf
	inc hl			; PTR2=flagbuf+1
	ld (ptr2),hl		; use hl for ptr2
while3
	ld a,(u16_n2)
	sub a,c
	ld a,(u16_n2+1)
	sbc a,b
	jr c,while3out		; while (i <= n2)
	
	ld a,(hl)
	or a
	jp nz,else3		; jp expected faster
	
	inc iy			; count2++
	ld h,b
	ld l,c
	printu16
	ld a,' '
	putc			; print i

else3	
	ld bc,(u16_i)
	inc bc
	ld (u16_i),bc		; i++
	ld hl,(ptr2)
	inc hl
	ld (ptr2),hl		; ptr2++
	jp while3
while3out
	ld (u16_count2),iy
	newline	

	ld hl,(timer)
	ld (u16_tm4),hl
	
	ld de,(u16_tm2)
	or a
	sbc hl,de
	ld (u16_tm3),hl		; tm3 = tm4-tm2
	ld hl,(u16_tm2)
	ld de,(u16_tm1)
	or a
	sbc hl,de
	ld (u16_tm2),hl		; tm2 = tm2-tm1
				
;
; print timings
	ld hl,(u16_N)
	printu16
	ld hl,STR3
	call putstring
	ld hl,(u16_tm1)
	printu16
	ld hl,STR2
	call putstring		; memset time
	
	ld hl,(u16_count)
	printu16
	ld hl,STR1
	call putstring
	ld hl,(u16_tm2)
	printu16
	ld hl,STR2
	call putstring		; calc time	

	ld hl,(u16_count2)
	printu16
	ld hl,STR1
	call putstring
	ld hl,(u16_tm3)
	printu16
	ld hl,STR2
	call putstring		; print time
	
	ld hl,(u16_tm4)
	printu16
	ld hl,STR4
	call putstring
		
	ret
;
; end of main

	include "..\include\timer.z80"
	include "..\include\memset.z80"
	include "..\include\putstring.z80"
	include "..\include\u16_2bcd.z80"
	include "..\include\printbcd20.z80"
	
;
; constants
STR1	DB " PRIMES IN",CR,LF,0
STR2	DB " TICKS",CR,LF,0
STR3	DB " BYTES CLEARED IN",CR,LF,0
STR4	DB " TICKS TOTAL",CR,LF,0
	
; end of code	
EEMAIN EQU $

;
; Variables not initialized
flagbuf		DS NN
ptr2		DS 2
timer		DS 2
u16_N		DS 2
u16_N2		DS 2
u16_i		DS 2
u16_count	DS 2
u16_count2	DS 2
u16_tm1 	DS 2
u16_tm2 	DS 2
u16_tm3 	DS 2
u16_tm4 	DS 2

;
; fill last 128byte block with 0
	ORG EEMAIN			; reset ORG to end of code 
EELAST EQU ($+127)&0FF80H
FILL	EQU EELAST-EEMAIN
	REPT FILL
	DEFB 0
	ENDM
	
	outradix 10
	message "Codesize: \{EEMAIN-AAMAIN}"
			